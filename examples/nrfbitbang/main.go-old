// nrfbitbang is example how to use nRF24L01+ transceiver connected to PC using
// USB and FT232RL module.
package main

import (
	"bufio"
	"fmt"
	"io"
	"os"

	"github.com/ziutek/bitbang/spi"
	"github.com/ziutek/ftdi"
)

// Connections (FT232RL -- nRF24L01+):
// TxD (DBUS0) -- MISO
// RxD (DBUS1) -- IRQ
// RTS (DBUS2) -- SCK
// CTS (DBUS3) -- MOSI
// DTR (DBUS4) -- CE
// DSR (DBUS5) -- CSN
const (
	MISO = 0x01
	IRQ  = 0x02
	SCK  = 0x04
	MOSI = 0x08
	CE   = 0x10
	CSN  = 0x20
)

func die(a ...interface{}) {
	fmt.Fprintln(os.Stderr, a...)
	os.Exit(1)
}

func checkErr(err error) {
	if err == nil {
		return
	}
	die(err)
}

func setupSPI(udev *ftdi.USBDev) *spi.Master {
	ft, err := ftdi.OpenUSBDev(udev, ftdi.ChannelAny)
	checkErr(err)
	checkErr(ft.SetBitmode(SCK|MOSI|CE|CSN, ftdi.ModeSyncBB))

	checkErr(ft.SetBaudrate(512 * 1024 / 16))
	const cs = 4096
	checkErr(ft.SetReadChunkSize(cs))
	checkErr(ft.SetWriteChunkSize(cs))
	checkErr(ft.SetLatencyTimer(2))
	checkErr(ft.PurgeBuffers())

	type drv struct {
		io.Reader
		*bufio.Writer
	}
	ma := spi.NewMaster(
		&drv{ft, bufio.NewWriterSize(ft, cs)},
		SCK, MOSI, MISO,
	)

	// Set up CSN line (or lines) before and after conversation.
	ma.SetPrePost([]byte{CSN}, []byte{CSN})

	cfg := spi.Config{
		Mode:     spi.MSBF | spi.CPOL0 | spi.CPHA0,
		FrameLen: 1,
		Delay:    0,
	}
	ma.Configure(cfg)

	return ma
}

func main() {
	udevs, err := ftdi.FindAll(0x0403, 0x6001)
	checkErr(err)

	if len(udevs) < 2 {
		die("Need two devices but", len(udevs), "detected.")
	}
	A := setupSPI(udevs[0])
	B := setupSPI(udevs[1])

	for _, ma := range []*spi.Master{A, B} {
		// Set down CSN line for whole period of conversation.
		ma.SetBase(0)
		buf := []byte{0xff}
		n, err := ma.WriteRead(buf, buf)
		fmt.Println(buf[:n])
		checkErr(err)
	}
}
